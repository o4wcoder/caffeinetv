apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.4'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage report for ${variantName.capitalize()}"
            reports {
                html.enabled = true
                xml.enabled = true
            }
            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    '**/*_AssistedFactory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*awaitAndParseErrors$response$*.*',
                    '**/*awaitEmptyAndParseErrors$response$*.*',
                    'tv/caffeine/app/BR.*',
                    'tv/caffeine/app/DataBinderMapper*.*',
                    'tv/caffeine/app/DataBindingInfo.*',
                    'tv/caffeine/app/MainNavDirections*.*',
                    'tv/caffeine/app/databinding/*.*',
                    'tv/caffeine/app/di/*.*',
                    'androidx/**/*.*',
                    'android/**/*.*'
            ]
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])
            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java"
            ])
            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        }
    }
}
